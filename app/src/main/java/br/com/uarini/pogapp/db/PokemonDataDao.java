package br.com.uarini.pogapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POKEMON_DATA".
*/
public class PokemonDataDao extends AbstractDao<PokemonData, Long> {

    public static final String TABLENAME = "POKEMON_DATA";

    /**
     * Properties of entity PokemonData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Qtd = new Property(1, Integer.class, "qtd", false, "QTD");
        public final static Property QtdCandy = new Property(2, Integer.class, "qtdCandy", false, "qtd_candy");
        public final static Property QtdCandyEvolve = new Property(3, Integer.class, "qtdCandyEvolve", false, "qtd_candy_evolve");
        public final static Property Transfer = new Property(4, Integer.class, "transfer", false, "TRANSFER");
        public final static Property PokemonNumber = new Property(5, Integer.class, "pokemonNumber", false, "pokemon_number");
    }


    public PokemonDataDao(DaoConfig config) {
        super(config);
    }
    
    public PokemonDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POKEMON_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QTD\" INTEGER," + // 1: qtd
                "\"qtd_candy\" INTEGER," + // 2: qtdCandy
                "\"qtd_candy_evolve\" INTEGER," + // 3: qtdCandyEvolve
                "\"TRANSFER\" INTEGER," + // 4: transfer
                "\"pokemon_number\" INTEGER);"); // 5: pokemonNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POKEMON_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PokemonData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qtd = entity.getQtd();
        if (qtd != null) {
            stmt.bindLong(2, qtd);
        }
 
        Integer qtdCandy = entity.getQtdCandy();
        if (qtdCandy != null) {
            stmt.bindLong(3, qtdCandy);
        }
 
        Integer qtdCandyEvolve = entity.getQtdCandyEvolve();
        if (qtdCandyEvolve != null) {
            stmt.bindLong(4, qtdCandyEvolve);
        }
 
        Integer transfer = entity.getTransfer();
        if (transfer != null) {
            stmt.bindLong(5, transfer);
        }
 
        Integer pokemonNumber = entity.getPokemonNumber();
        if (pokemonNumber != null) {
            stmt.bindLong(6, pokemonNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PokemonData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer qtd = entity.getQtd();
        if (qtd != null) {
            stmt.bindLong(2, qtd);
        }
 
        Integer qtdCandy = entity.getQtdCandy();
        if (qtdCandy != null) {
            stmt.bindLong(3, qtdCandy);
        }
 
        Integer qtdCandyEvolve = entity.getQtdCandyEvolve();
        if (qtdCandyEvolve != null) {
            stmt.bindLong(4, qtdCandyEvolve);
        }
 
        Integer transfer = entity.getTransfer();
        if (transfer != null) {
            stmt.bindLong(5, transfer);
        }
 
        Integer pokemonNumber = entity.getPokemonNumber();
        if (pokemonNumber != null) {
            stmt.bindLong(6, pokemonNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PokemonData readEntity(Cursor cursor, int offset) {
        PokemonData entity = new PokemonData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // qtd
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // qtdCandy
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // qtdCandyEvolve
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // transfer
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // pokemonNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PokemonData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQtd(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setQtdCandy(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setQtdCandyEvolve(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTransfer(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPokemonNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PokemonData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PokemonData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PokemonData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
